// Mocks generated by Mockito 5.4.4 from annotations
// in flutter_bigpay_movie_app/test/di/generated_mocks.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:either_dart/either.dart' as _i6;
import 'package:flutter_bigpay_movie_app/core/data/repository/environment/environment_repository.dart'
    as _i3;
import 'package:flutter_bigpay_movie_app/features/popular_movies/models/popular_movies.dart'
    as _i7;
import 'package:flutter_bigpay_movie_app/features/popular_movies/repositories/popular_movies_repository.dart'
    as _i5;
import 'package:flutter_bigpay_movie_app/features/popular_movies/states/popular_movies_cubit.dart'
    as _i2;
import 'package:flutter_bloc/flutter_bloc.dart' as _i9;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i8;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakePopularMoviesState_0 extends _i1.SmartFake
    implements _i2.PopularMoviesState {
  _FakePopularMoviesState_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [EnvironmentRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockEnvironmentRepository extends _i1.Mock
    implements _i3.EnvironmentRepository {
  MockEnvironmentRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<void> setAPIToken({required String? envAPIToken}) =>
      (super.noSuchMethod(
        Invocation.method(
          #setAPIToken,
          [],
          {#envAPIToken: envAPIToken},
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> setAccessToken({required String? envAccessToken}) =>
      (super.noSuchMethod(
        Invocation.method(
          #setAccessToken,
          [],
          {#envAccessToken: envAccessToken},
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);
}

/// A class which mocks [PopularMoviesRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockPopularMoviesRepository extends _i1.Mock
    implements _i5.PopularMoviesRepository {
  MockPopularMoviesRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i6.Either<String, List<_i7.PopularMovies>>> fetchMoviesList(
          {int? page = 1}) =>
      (super.noSuchMethod(
        Invocation.method(
          #fetchMoviesList,
          [],
          {#page: page},
        ),
        returnValue:
            _i4.Future<_i6.Either<String, List<_i7.PopularMovies>>>.value(
                _i8.dummyValue<_i6.Either<String, List<_i7.PopularMovies>>>(
          this,
          Invocation.method(
            #fetchMoviesList,
            [],
            {#page: page},
          ),
        )),
      ) as _i4.Future<_i6.Either<String, List<_i7.PopularMovies>>>);

  @override
  String getMoviePosterUrl({required String? moviePosterPath}) =>
      (super.noSuchMethod(
        Invocation.method(
          #getMoviePosterUrl,
          [],
          {#moviePosterPath: moviePosterPath},
        ),
        returnValue: _i8.dummyValue<String>(
          this,
          Invocation.method(
            #getMoviePosterUrl,
            [],
            {#moviePosterPath: moviePosterPath},
          ),
        ),
      ) as String);

  @override
  bool getBoolValueForFetchMovies() => (super.noSuchMethod(
        Invocation.method(
          #getBoolValueForFetchMovies,
          [],
        ),
        returnValue: false,
      ) as bool);

  @override
  void setBoolValueForFetchMovies({bool? shouldFetchMore}) =>
      super.noSuchMethod(
        Invocation.method(
          #setBoolValueForFetchMovies,
          [],
          {#shouldFetchMore: shouldFetchMore},
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [PopularMoviesCubit].
///
/// See the documentation for Mockito's code generation for more information.
class MockPopularMoviesCubit extends _i1.Mock
    implements _i2.PopularMoviesCubit {
  MockPopularMoviesCubit() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.PopularMoviesState get state => (super.noSuchMethod(
        Invocation.getter(#state),
        returnValue: _FakePopularMoviesState_0(
          this,
          Invocation.getter(#state),
        ),
      ) as _i2.PopularMoviesState);

  @override
  _i4.Stream<_i2.PopularMoviesState> get stream => (super.noSuchMethod(
        Invocation.getter(#stream),
        returnValue: _i4.Stream<_i2.PopularMoviesState>.empty(),
      ) as _i4.Stream<_i2.PopularMoviesState>);

  @override
  bool get isClosed => (super.noSuchMethod(
        Invocation.getter(#isClosed),
        returnValue: false,
      ) as bool);

  @override
  _i4.Future<void> fetchPopularMovies(int? page) => (super.noSuchMethod(
        Invocation.method(
          #fetchPopularMovies,
          [page],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  void emit(_i2.PopularMoviesState? state) => super.noSuchMethod(
        Invocation.method(
          #emit,
          [state],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onChange(_i9.Change<_i2.PopularMoviesState>? change) =>
      super.noSuchMethod(
        Invocation.method(
          #onChange,
          [change],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void addError(
    Object? error, [
    StackTrace? stackTrace,
  ]) =>
      super.noSuchMethod(
        Invocation.method(
          #addError,
          [
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onError(
    Object? error,
    StackTrace? stackTrace,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #onError,
          [
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i4.Future<void> close() => (super.noSuchMethod(
        Invocation.method(
          #close,
          [],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);
}
